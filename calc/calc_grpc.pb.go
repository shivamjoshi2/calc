// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: calc/calc.proto

package calc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalcClient is the client API for Calc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalcClient interface {
	// Sum
	TwoSum(ctx context.Context, in *TwoNumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	// Prime
	PrimeNums(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (Calc_PrimeNumsClient, error)
	// Average
	Average(ctx context.Context, opts ...grpc.CallOption) (Calc_AverageClient, error)
	// Max
	MaxNumber(ctx context.Context, opts ...grpc.CallOption) (Calc_MaxNumberClient, error)
}

type calcClient struct {
	cc grpc.ClientConnInterface
}

func NewCalcClient(cc grpc.ClientConnInterface) CalcClient {
	return &calcClient{cc}
}

func (c *calcClient) TwoSum(ctx context.Context, in *TwoNumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/calc.Calc/TwoSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcClient) PrimeNums(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (Calc_PrimeNumsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Calc_ServiceDesc.Streams[0], "/calc.Calc/PrimeNums", opts...)
	if err != nil {
		return nil, err
	}
	x := &calcPrimeNumsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Calc_PrimeNumsClient interface {
	Recv() (*AllPrimesResponse, error)
	grpc.ClientStream
}

type calcPrimeNumsClient struct {
	grpc.ClientStream
}

func (x *calcPrimeNumsClient) Recv() (*AllPrimesResponse, error) {
	m := new(AllPrimesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calcClient) Average(ctx context.Context, opts ...grpc.CallOption) (Calc_AverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Calc_ServiceDesc.Streams[1], "/calc.Calc/Average", opts...)
	if err != nil {
		return nil, err
	}
	x := &calcAverageClient{stream}
	return x, nil
}

type Calc_AverageClient interface {
	Send(*NumRequest) error
	CloseAndRecv() (*AverageResponse, error)
	grpc.ClientStream
}

type calcAverageClient struct {
	grpc.ClientStream
}

func (x *calcAverageClient) Send(m *NumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calcAverageClient) CloseAndRecv() (*AverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calcClient) MaxNumber(ctx context.Context, opts ...grpc.CallOption) (Calc_MaxNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &Calc_ServiceDesc.Streams[2], "/calc.Calc/MaxNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &calcMaxNumberClient{stream}
	return x, nil
}

type Calc_MaxNumberClient interface {
	Send(*NumRequest) error
	Recv() (*MaxNumResponse, error)
	grpc.ClientStream
}

type calcMaxNumberClient struct {
	grpc.ClientStream
}

func (x *calcMaxNumberClient) Send(m *NumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calcMaxNumberClient) Recv() (*MaxNumResponse, error) {
	m := new(MaxNumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalcServer is the server API for Calc service.
// All implementations must embed UnimplementedCalcServer
// for forward compatibility
type CalcServer interface {
	// Sum
	TwoSum(context.Context, *TwoNumRequest) (*SumResponse, error)
	// Prime
	PrimeNums(*NumRequest, Calc_PrimeNumsServer) error
	// Average
	Average(Calc_AverageServer) error
	// Max
	MaxNumber(Calc_MaxNumberServer) error
	mustEmbedUnimplementedCalcServer()
}

// UnimplementedCalcServer must be embedded to have forward compatible implementations.
type UnimplementedCalcServer struct {
}

func (UnimplementedCalcServer) TwoSum(context.Context, *TwoNumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwoSum not implemented")
}
func (UnimplementedCalcServer) PrimeNums(*NumRequest, Calc_PrimeNumsServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeNums not implemented")
}
func (UnimplementedCalcServer) Average(Calc_AverageServer) error {
	return status.Errorf(codes.Unimplemented, "method Average not implemented")
}
func (UnimplementedCalcServer) MaxNumber(Calc_MaxNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method MaxNumber not implemented")
}
func (UnimplementedCalcServer) mustEmbedUnimplementedCalcServer() {}

// UnsafeCalcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalcServer will
// result in compilation errors.
type UnsafeCalcServer interface {
	mustEmbedUnimplementedCalcServer()
}

func RegisterCalcServer(s grpc.ServiceRegistrar, srv CalcServer) {
	s.RegisterService(&Calc_ServiceDesc, srv)
}

func _Calc_TwoSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServer).TwoSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calc.Calc/TwoSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServer).TwoSum(ctx, req.(*TwoNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calc_PrimeNums_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NumRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalcServer).PrimeNums(m, &calcPrimeNumsServer{stream})
}

type Calc_PrimeNumsServer interface {
	Send(*AllPrimesResponse) error
	grpc.ServerStream
}

type calcPrimeNumsServer struct {
	grpc.ServerStream
}

func (x *calcPrimeNumsServer) Send(m *AllPrimesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Calc_Average_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalcServer).Average(&calcAverageServer{stream})
}

type Calc_AverageServer interface {
	SendAndClose(*AverageResponse) error
	Recv() (*NumRequest, error)
	grpc.ServerStream
}

type calcAverageServer struct {
	grpc.ServerStream
}

func (x *calcAverageServer) SendAndClose(m *AverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calcAverageServer) Recv() (*NumRequest, error) {
	m := new(NumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Calc_MaxNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalcServer).MaxNumber(&calcMaxNumberServer{stream})
}

type Calc_MaxNumberServer interface {
	Send(*MaxNumResponse) error
	Recv() (*NumRequest, error)
	grpc.ServerStream
}

type calcMaxNumberServer struct {
	grpc.ServerStream
}

func (x *calcMaxNumberServer) Send(m *MaxNumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calcMaxNumberServer) Recv() (*NumRequest, error) {
	m := new(NumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Calc_ServiceDesc is the grpc.ServiceDesc for Calc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calc.Calc",
	HandlerType: (*CalcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TwoSum",
			Handler:    _Calc_TwoSum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeNums",
			Handler:       _Calc_PrimeNums_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Average",
			Handler:       _Calc_Average_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MaxNumber",
			Handler:       _Calc_MaxNumber_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calc/calc.proto",
}
